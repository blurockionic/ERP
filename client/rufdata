<div style={{ maxHeight: "200px", overflowY: "auto" }}>
    <h3>Selected Options:</h3>
    <ul>
      {selectedSoupsAndSaladOptions.map((option, index) => {
        // Check if the current option is the start of a new group
        const isFirstInGroup = index === 0 || option.group !== selectedSoupsAndSaladOptions[index - 1].group;
        
        
          <React.Fragment key={option.value}>
            {isFirstInGroup && (
              <li style={{ fontWeight: 'bold', marginBottom: '5px' }}>{option.group}</li>
            )}
            <li>{option.label}</li>
          </React.Fragment>
    
      })}
    </ul>
  </div>





      <label className="flex justify-center border  text-cente py-2 rounded hover:bg-slate-50">
                  <input
                    type="checkbox"
                    style={{
                      marginTop: "4px",
                      marginLeft: "4px",
                      paddingTop: "2px",
                      width: "16px", // Set the width
                      height: "16px", // Set the height
                      border: "2px solid #4F46E5",
                    }}
                    className="mr-2"
                    value="decoration"
                    onChange={() => handleCheckboxChange("decoration")}
                  />
                  Decoration
                </label>
                <label className="flex justify-center border  text-cente py-2 rounded hover:bg-slate-50">
                  <input
                    type="checkbox"
                    style={{
                      marginTop: "4px",
                      marginLeft: "4px",
                      paddingTop: "2px",
                      width: "16px", // Set the width
                      height: "16px", // Set the height
                      border: "2px solid #4F46E5",
                    }}
                    className="mr-2"
                    value="catering"
                    onChange={() => handleCheckboxChange("catering")}
                  />
                  Catering
                </label>
                <label className="flex justify-center border  text-cente py-2 rounded hover:bg-slate-50">
                  <input
                    type="checkbox"
                    style={{
                      marginTop: "4px",
                      marginLeft: "4px",
                      paddingTop: "2px",
                      width: "16px", // Set the width
                      height: "16px", // Set the height
                      border: "2px solid #4F46E5",
                    }}
                    className="mr-2"
                    value="light"
                    onChange={() => handleCheckboxChange("light")}
                  />
                  Light
                </label>
                <label className="flex justify-center border  text-cente py-2 rounded hover:bg-slate-50">
                  <input
                    type="checkbox"
                    style={{
                      marginTop: "4px",
                      marginLeft: "4px",
                      paddingTop: "2px",
                      width: "16px", // Set the width
                      height: "16px", // Set the height
                      border: "2px solid #4F46E5",
                    }}
                    className="mr-2"
                    value="bistar"
                    onChange={() => handleCheckboxChange("bistar")}
                  />
                  Bistar
                </label>







  









    {step === 3 && isNextClicked && (
            <>
              {/* parent div  */}
              <div className=" mt-2 max-w-md mx-auto ">
                {/* chair div  */}
                <div className="mt-2 flex flex-row justify-stretch gap-7">
                  <label htmlFor="met" className="">
                    Chair:
                  </label>
                  <select
                    id="chair"
                    name="chair"
                    // onChange={(e) => {
                    //   setChair(e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">Different type of chairs</option>
                    <option value="Normal Chair"> Normal Chair </option>
                    <option value="High Back chair">High Back chair </option>
                  </select>
                  <input
                    type="number"
                    id="chairCount"
                    name="chairCount"
                    // onChange={(e) => handleChange(chair, e.target.value)}
                    style={{ display: "none" }}
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>

                {/* mat div  */}
                <div className="mt-2 flex flex-row justify-stretch gap-7">
                  <label htmlFor="mat" className="">
                    Mats:
                  </label>
                  <select
                    id="mat"
                    name="mat"
                    // onChange={(e) => {
                    //   setMats(e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">Different Color Mat</option>
                    <option value="Green mat">Green mat </option>
                    <option value="Black mat">Black mat </option>
                    <option value="Red mat">Red mat </option>
                    <option value="Goldenmet">Golden mat </option>
                  </select>
                  <input
                    type="number"
                    id="metCount"
                    name="metCount"
                    // onChange={(e) => handleChange(mats, e.target.value)}
                    style={{ display: "none" }}
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>

                {/* couter div */}
                <div className="mt-2 flex flex-row justify-stretch gap-2">
                  <label htmlFor="met" className="">
                    Counter:
                  </label>
                  <select
                    id="counter"
                    name="counter"
                    // onChange={(e) => {
                    //   setCounters("counter", e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">Type of Counter</option>
                    <option value="Counter">Counter</option>
                  </select>

                  <input
                    type="number"
                    id="counterCount"
                    name="counterCount"
                    // onChange={(e) => handleChange(counters, e.target.value)}
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>
                {/* galiche div  */}
                <div className="mt-2 flex flex-row justify-stretch gap-3">
                  <label htmlFor="galiche" className="">
                    Galiche:
                  </label>
                  <select
                    id="galiche"
                    name="galiche"
                    // onChange={(e) => {
                    //   setGaliche(e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">Type of galiche</option>
                    <option value="galiche">galiche</option>
                  </select>
                  <input
                    type="number"
                    id="galicheCount"
                    name="galicheCount"
                    // onChange={(e) => handleChange(galiche, e.target.value)}
                    style={{ display: "none" }}
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>

                <h1 className="mt-2  font-bold"> All Type of tables </h1>

                {/* Table div */}
                <div className="mt-2 flex flex-row justify-stretch gap-2">
                  <label htmlFor="Table" className="">
                    Normal Table:
                  </label>
                  <select
                    id="table"
                    name="table"
                    // onChange={(e) => {
                    //   setNormalTable(e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">select</option>
                    <option value="Normal Table">Normal Table</option>
                  </select>

                  <input
                    type="number"
                    id="normalTableCount"
                    name="normalTableCount"
                    // onChange={(e) =>
                    //   handleChange(normalTable, e.target.value)
                    // }
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>
                {/* Standing Table */}
                <div className="mt-2 flex flex-row justify-stretch gap-2">
                  <label htmlFor="Table" className="">
                    Standing Table:
                  </label>
                  <select
                    id="StandingTable"
                    name="StandingTable"
                    // onChange={(e) => {
                    //   setStandingTable(e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">select</option>
                    <option value="Standing Table">Standing Table</option>
                  </select>

                  <input
                    type="number"
                    id="standingTableCount"
                    name="standingTableCount"
                    // onChange={(e) =>
                    //   handleChange(standingTable, e.target.value)
                    // }
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>
                {/* rounded */}
                <div className="mt-2 flex flex-row justify-stretch gap-2">
                  <label htmlFor="Table" className="">
                    Rounded Table:
                  </label>
                  <select
                    id="roundedTable"
                    name="roundedtable"
                    // onChange={(e) => {
                    //   setRoundedTable(e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">select</option>
                    <option value="Rounded Table">Rounded Table</option>
                  </select>

                  <input
                    type="number"
                    id="normalTableCount"
                    name="normalTableCount"
                    // onChange={(e) =>
                    //   handleChange(roundedTable, e.target.value)
                    // }
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>
              </div>

              {/* parent div  */}
              <div className=" mt-2 max-w-md mx-auto ">
                <div className="flex justify-stretch">
                  <label htmlFor="name">Enter the Area:</label>
                  <input
                    type="text"
                    // onChange={(e) => setArea(e.target.value)}
                    placeholder="Area (optional) ex-(lxbxh)"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>
                {/* Beam div  */}
                <div className="mt-4 flex flex-row justify-stretch gap-7">
                  <label htmlFor="met" className="">
                    Beam:
                  </label>
                  <select
                    id="beam"
                    name="beam"
                    // onChange={(e) => {
                    //   setBeam(e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">Different type of Beam</option>
                    <option value="12 feet beam "> 12 Feet Beam </option>
                    <option value="10feet beam"> 10 Feet Beam</option>
                  </select>
                  <input
                    type="number"
                    id="beamCount"
                    name="beamCount"
                    // onChange={(e) => handleChange(beam, e.target.value)}
                    style={{ display: "none" }}
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>

                {/* piller  div  */}
                <div className="mt-4 flex flex-row justify-stretch gap-7">
                  <label htmlFor="met" className="">
                    Piller:
                  </label>
                  <select
                    id="piller"
                    name="piller"
                    // onChange={(e) => {
                    //   setPillar(e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">Different type of piller</option>
                    <option value="12 feet pillar "> 12 Feet piller </option>
                    <option value="10 feet pillar"> 10 Feetpiller</option>
                  </select>
                  <input
                    type="number"
                    id="pillerCount"
                    name="pillerCount"
                    // onChange={(e) => handleChange(pillar, e.target.value)}
                    style={{ display: "none" }}
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>

                {/* lengths  */}
                <div className="mt-4 flex flex-row justify-stretch gap-7">
                  <label htmlFor="met" className="">
                    Length:
                  </label>
                  <select
                    id="length"
                    name="length"
                    // onChange={(e) => {
                    //   setLength(e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">Select </option>
                    <option value="length">Lenght</option>
                  </select>
                  <input
                    type="number"
                    id="lengthCount"
                    name="lengthCount"
                    // onChange={(e) => handleChange(length, e.target.value)}
                    style={{ display: "none" }}
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>

                {/* Paya  */}
                <div className="mt-4 flex flex-row justify-stretch gap-7">
                  <label htmlFor="met" className="">
                    Paya:
                  </label>
                  <select
                    id="paya"
                    name="paya"
                    // onChange={(e) => {
                    //   setPaya(e.target.value);
                    //   showCountInput(e.target);
                    // }}
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">Select </option>
                    <option value="paya">Paya</option>
                  </select>
                  <input
                    type="number"
                    id="PayaCount"
                    name="payaCount"
                    // onChange={(e) => handleChange(paya, e.target.value)}
                    style={{ display: "none" }}
                    placeholder="Count"
                    className="w-full py-2 px-4 rounded border border-gray-300 focus:outline-none focus:border-blue-500"
                  />
                </div>

                {/* Add similar divs for other fields */}
              </div>
            </>
          )}





















 const nextPageHandler = () => {
    if (step === 1) {
      // Proceed to the next step if the current step is 1
      setStep(step + 1);
    } else if (step === 2) {
      // Check if step is 2 and validate service selection
      if (checkedItems === null || (!isTentChecked || !isCateringChecked)) {
        alert("Please select at least one service");
      } else {
        // Proceed to the next step if services are selected
        setIsNextClicked(true);
        setStep(step + 1);
      }
    }
  };










